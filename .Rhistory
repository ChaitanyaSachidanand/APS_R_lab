return(sample.int(1:365, 30))
}
# Chunk 3
nsimuationss=100000 #100 simulation of Judges results
simulatedData = replicate(nsimuationss,Random30people())
# Chunk 1
#set.seed(1) # random number will generate from 1
Random30 = sample.int(365, 30)
length(Random30)
mean(Random30)
table(Random30)
# Chunk 2
Random30people = function(){
# return(sample.int(365,30))
return(sample.(1:365, 30, replace=FALSE)
}
# Chunk 1
#set.seed(1) # random number will generate from 1
Random30 = sample.int(365, 30)
length(Random30)
mean(Random30)
table(Random30)
# Chunk 2
Random30people = function(){
# return(sample.int(365,30))
return(sample.(1:365, 30, replace=FALSE))
}
# Chunk 3
nsimuationss=100000 #100 simulation of Judges results
simulatedData = replicate(nsimuationss,Random30people())
# Chunk 1
#set.seed(1) # random number will generate from 1
Random30 = sample.int(365, 30)
length(Random30)
mean(Random30)
table(Random30)
# Chunk 2
Random30people = function(){
# return(sample.int(365,30))
return(sample(1:365, 30, replace=FALSE))
}
# Chunk 3
nsimuationss=100000 #100 simulation of Judges results
simulatedData = replicate(nsimuationss,Random30people())
# Chunk 4
dim(simulatedData)
simulatedData[,1]
c=simulatedData[simulatedData == 907]
print(c)
# Chunk 5
# checkEvent = function(data_num){
#   count_n=0
#   for(i in data_num){
#       if(data_num[data_num == i]){
#         count_n=count_n+1
#       }
#     }
#
#     print(count_n)
# }
# Chunk 6
# checkEvent(simulatedData[,1])
# Chunk 7
table(simulatedData[,1])
# Chunk 8
apply(simulatedData, 2,table)
# Chunk 9
sum(apply(simulatedData, 2,table))
# Chunk 1
#set.seed(1) # random number will generate from 1
Random30 = sample.int(365, 30)
length(Random30)
mean(Random30)
table(Random30)
# Chunk 2
Random30people = function(){
# return(sample.int(365,30))
return(sample(1:365, 30, replace=TRUE))
}
# Chunk 3
nsimuationss=100000 #100 simulation of Judges results
simulatedData = replicate(nsimuationss,Random30people())
# Chunk 4
dim(simulatedData)
simulatedData[,1]
c=simulatedData[simulatedData == 907]
print(c)
# Chunk 5
# checkEvent = function(data_num){
#   count_n=0
#   for(i in data_num){
#       if(data_num[data_num == i]){
#         count_n=count_n+1
#       }
#     }
#
#     print(count_n)
# }
# Chunk 6
# checkEvent(simulatedData[,1])
# Chunk 7
table(simulatedData[,1])
# Chunk 8
apply(simulatedData, 2,table)
# Chunk 9
sum(apply(simulatedData, 2,table))
table(simulatedData[,1])
apply(simulatedData, 2,table)
sum(apply(simulatedData, 2,table))
zzz=apply(simulatedData, 2,table)
dim(zzz)
dim(zzz)
zzz
dim(zzz)
table(rpois(100, 5))
type(zzz)
find(zzz)
class(zzz)
dim(zzz)
dim(zzz)
length(zzz)
size(zzz)
NCOL(zzz)
nrow(zzz)
class(zzz)
numeric(10)
sum(zzz)
matrix(zzz)
abd=matrix(zzz)
class(abd)
dim(abd)
str(abd)
sum(abd)
sum(abd[1])
abd[1]
abd[,1]
abd[1]
abd[1,1]
sum(abd[1])
sum(abd[1:3])
abd[1:3]
count(abd[1])
sum(abd)
length(abd)
length(zzz)
class(zzz)
length(zzz)
abd=matrix(zzz)
class(abd)
dim(abd)
length(abd)
count(abd[1])
as.table(simulatedData[,1],)
as.table(simulatedData[,1])
table(simulatedData[,1])
is.table(simulatedData[,1])
as.table(simulatedData[,1])
tabulate(simulatedData[,1])
table(simulatedData[,1])
tabulate(simulatedData[,1])
table(simulatedData[1])
table(simulatedData[,1])
tabulate(simulatedData[,1])
tabulate(simulatedData)
tabulate(simulatedData[,1])
sum(tabulate(simulatedData[,1]))
# Chunk 1
#set.seed(1) # random number will generate from 1
Random30 = sample.int(365, 30)
length(Random30)
mean(Random30)
table(Random30)
# Chunk 2
Random30people = function(){
# return(sample.int(365,30))
return(sample(1:365, 30, replace=TRUE))
}
# Chunk 3
nsimuationss=100000 #100 simulation of Judges results
simulatedData = replicate(nsimuationss,Random30people())
# Chunk 4
dim(simulatedData)
simulatedData[,1]
c=simulatedData[simulatedData == 907]
print(c)
# Chunk 5
# checkEvent = function(data_num){
#   count_n=0
#   for(i in data_num){
#       if(data_num[data_num == i]){
#         count_n=count_n+1
#       }
#     }
#
#     print(count_n)
# }
# Chunk 6
# checkEvent(simulatedData[,1])
# Chunk 7
table(simulatedData[,1])
# Chunk 8
apply(simulatedData,2,table)
# Chunk 9
zzz=apply(simulatedData, 2,table)
# Chunk 10
class(zzz)
length(zzz)
abd=matrix(zzz)
# Chunk 11
class(abd)
dim(abd)
length(abd)
count(abd[1])
# Chunk 1
#set.seed(1) # random number will generate from 1
Random30 = sample.int(365, 30)
length(Random30)
mean(Random30)
table(Random30)
# Chunk 2
Random30people = function(){
# return(sample.int(365,30))
return(sample(1:365, 30, replace=TRUE))
}
# Chunk 3
nsimuationss=100000 #100 simulation of Judges results
simulatedData = replicate(nsimuationss,Random30people())
# Chunk 4
dim(simulatedData)
simulatedData[,1]
c=simulatedData[simulatedData == 907]
print(c)
# Chunk 5
# checkEvent = function(data_num){
#   count_n=0
#   for(i in data_num){
#       if(data_num[data_num == i]){
#         count_n=count_n+1
#       }
#     }
#
#     print(count_n)
# }
# Chunk 6
# checkEvent(simulatedData[,1])
# Chunk 7
table(simulatedData[,1])
# Chunk 8
apply(simulatedData,2,table)
# Chunk 9
zzz=apply(simulatedData, 2,table)
# Chunk 10
# Function to check if all birthdays are unique
checkEvent = function(data){
if (length(unique(data)) == 30){
return(1)
}
else{
return(0)
}
}
# Chunk 11
print(checkEvent(zzz))
source("~/.active-rstudio-document")
# Chunk 1
library(ggplot2)
# Load the mpg dataset
data('mpg')
mpgData = mpg
library(ggplot2)
library(ggplot2)
ggplt2
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
# Load the mpg dataset
data('mpg')
mpgData = mpg
library(ggplot2)
library(ggplot2)
install.packages("ggplot2")
```{r}
library(ggplot2)
# Load the mpg dataset
data('mpg')
mpgData = mpg
# Print the first five rows (or samples) in the data frame
head(mpgData, 5)
# Load the mpg dataset
data('mpg')
mpgData = mpg
# Print the first five rows (or samples) in the data frame
head(mpgData, 5)
# Load the mpg dataset
data('mpg')
mpgData = mpg
# Print the first five rows (or samples) in the data frame
head(mpgData, 5)
# Initiate the ggplot() function binding to the car data frame
ggplot(data = mpgData)
# Create a plot object
p1 = ggplot(data = mpgData)
# Use the aes() function to specify the aesthetic mapping, that is, which variables
# should be plotted
p1 = ggplot(data = mpgData, aes(x = disp, y = hwy))
# Use the geom_ type functions to add geometric elements
p1 = ggplot(data = mpgData, aes(x = displ, y = hwy)) +
geom_point()
# Add labels and title
p1 = p1 + labs(x = 'Displacement (litres)', y = 'Mileage (MPG)', title = 'Mileage vs. Displacement')
p1
# Use the aes() function to specify the aesthetic mapping, that is, which variables
# should be plotted
p1 = ggplot(data = mpgData, aes(x = disp, y = hwy))
# Use the geom_ type functions to add geometric elements
p1 = ggplot(data = mpgData, aes(x = displ, y = hwy)) +
geom_point()
# Add labels and title
p1 = p1 + labs(x = 'Displacement (litres)', y = 'Mileage (MPG)', title = 'Mileage vs. Displacement')
p1
dfPatients= read.csv('Data/emergency.csv')
# Chunk 1
dfPatients= read.csv('Data/emergency.csv')
dfPatients= read.csv('Data/emergency.csv')
dfPatients= read.csv('Data/emergency.csv')
dfPatients= read.csv('Data/emergency.csv')
ls
dfPatients= read.csv('Data/emergency.csv')
path
dfPatients= read.csv('Data/emergency.csv')
dfPatients= read.csv('Data/emergency.csv')
dfPatients= read.csv('Data/emergency.csv')
dfPatients= read.csv('Data/emergency.csv')
setwd("C:/Users/ASUS/Desktop/APS_R_lab")
dfPatients= read.csv('Data/emergency.csv')
dfPatients= read.csv('Data/emergency.csv')
type(dfPatients)
str(dfPatients)
str(dfPatients)
dfPatients
str(dfPatients$Condition)
dfPatients$Condition
dfPatients[['condictions']]
dfPatients[['Condiction']]
dfPatients[['Condition']]
str(dfPatients$Condition)
str(dfPatients[['Condition']])
str(dfPatients['Condition'])
dfPatients['Condition']
str(dfPatients['Condition'])
str(dfPatients$Condition)
dfPatients[,'Condition']
dfPatients[2]
dfPatients[2]=='serious'
dfPatients[dfPatients[2]=='serious']
dfPatients[dfPatients[2]=='serious',]
``````{r}
dfPatients[2]=='serious'
``````{r}
sum(dfPatients$Condition=='Serioud')
sum(dfPatients$Condition=='Serious')
sum(dfPatients$Condition=='serious')
mean(dfPatients=='serious')
sum(dfPatients=='serious')
mean(dfPatients=='serious')
sum(dfPatients=='serious')
mean(dfPatients$Condition=='serious')
median(dfPatients$Condition=='serious)
median(dfPatients$Condition=='serious)
median(dfPatients$Condition=='serious)
median(dfPatients$Condition=='serious)
median(dfPatients$Condition=='serious')
mode(dfPatients$Condition=='serious')
mode(dfPatients$Condition=='serious')
mode(dfPatients$Condition)
median(dfPatients$Condition)
=='serious'
median(dfPatients$Condition=='serious')
mode(dfPatients$Condition=='serious')
```
mean(dfPatients$Condition=='serious')
print(p)
p = c(mean(dfPatients$Condition=='serious',1-mean(dfPatients$Condition=='serious')
p = c(mean(dfPatients$Condition=='serious',1-mean(dfPatients$Condition=='serious')
p = c(mean(dfPatients$Condition=='serious',1-mean(dfPatients$Condition=='serious')))
p = c(mean(dfPatients$Condition=='serious',1-mean(dfPatients$Condition=='serious')))
print(p)
p=c(serious_p,not_serous)
not_serous=1-mean(dfPatients$Condition=='not serious')
not_serous=1-mean(dfPatients$Condition=='not serious')
serious_p=mean(dfPatients$Condition=='serious')
not_serous=1-mean(dfPatients$Condition=='not serious')
p=c(serious_p,not_serous)
print(p)
serious_p=mean(dfPatients$Condition=='serious')
not_serous=mean(dfPatients$Condition=='not serious')
p=c(serious_p,not_serous)
print(p)
str(dfPatients$Condition)
dfPatients$Condition
p=c(serious_p,fair_p,good_p)
serious_p=mean(dfPatients$Condition=='serious')
fair_p=mean(dfPatients$Condition=='fair')
good_p=mean(dfPatients$Condition=='good')
p=c(serious_p,fair_p,good_p)
print(p)
s=c(1,0)
print(s)
sample(s, size = 100, replace = TRUE, prob = p[1, ])
sample(s, size = 100, replace = TRUE, prob = p[,1 ])
sample(s, size = 100, replace = TRUE, prob = p)
p=c(serious_p,fair_p)
serious_p=mean(dfPatients$Insurance=='insured')
fair_p=mean(dfPatients$Insurance=='not insured')
p=c(serious_p,fair_p)
print(p)
s=c(1,0)
print(s)
sample(s, size = 100, replace = TRUE, prob = p)
s=c(1,0)
for (j in c(1:5)) {
print(j)
}
sum(aaaaa)
aaaaa=sample(s, size = 100, replace = TRUE, prob = p)
aaaaa=sample(s, size = 100, replace = TRUE, prob = p)
sum(aaaaa)
factor(dfPatients$Condition)
dfPatients$Condition=factor(dfPatients$Condition)
str(dfPatients)
read.csv("Data/emergency.csv",row.names=1,stringsAsFactors = TRUE)
dfPatients[,catagorical_col] <- lapply(mydata[,catagorical_col] , factor)
dfPatients[,catagorical_col] <- lapply(mydata[,catagorical_col] , factor)
contineous_features=c()
catagorical_col=c('Condition','Insurance')
dfPatients[,catagorical_col] <- lapply(mydata[,catagorical_col] , factor)
dfPatients[,catagorical_col] <- lapply(dfPatients[,catagorical_col] , factor)
str(dfPatients)
dfPatients[,catagorical_col] = lapply(dfPatients[,catagorical_col] , factor)
str(dfPatients)
dfPatients{,dfPatients$Insurance=='insured' && dfPatients=='serious'}
dfPatients[,dfPatients$Insurance=='insured' && dfPatients=='serious']
dfPatients[,dfPatients$Insurance=='insured' & dfPatients=='serious']
str(dfPatients$Condition)
dfPatients['Condition']
dfPatients$Insurance
dfPatients[,c(dfPatients$Insurance=='insured' & dfPatients$Condition=='serious')]
dfPatients[,c(dfPatients$Insurance=='insured' & dfPatients$Condition=='serious')]
dfPatients[,dfPatients$Insurance=='insured']
dfPatients[,dfPatients$Insurance=='insured']
dfPatients=read.csv("Data/emergency.csv",row.names=1)
contineous_features=c()
contineous_features=c()
catagorical_col=c('Condition','Insurance')
dfPatients[,catagorical_col] = lapply(dfPatients[,catagorical_col] , factor)
str(dfPatients)
str(dfPatients)
```{r}
dfPatients[,c(dfPatients$Insurance=='insured' & dfPatients$Condition=='serious')]
dfPatients[,c(dfPatients$Insurance=='insured' & dfPatients$Condition=='serious')]
dfPatients[,dfPatients$Insurance=='insured']
dfPatients[dfPatients$Insurance=='insured']
dfPatients$Condition=='serious')
dfPatients$Condition=='serious'
dfPatients[dfPatients$Condition=='serious']
dfPatients[,dfPatients$Condition=='serious']
dfPatients[,catagorical_col]
dfPatients[,catagorical_col]=c('serious','insured')
dfPatients[,catagorical_col]=c('serious','insured')
dfPatients[,catagorical_col=c('serious','insured')]
c('serious','insured')
dfPatients[dfPatients='serious']
dfPatients[dfPatients$Condition='serious']
c('serious','insured')
dfPatients[dfPatients$Condition=='serious']
dfPatients=read.csv("Data/emergency.csv",row.names=1)
contineous_features=c()
catagorical_col=c('Condition','Insurance')
dfPatients[,catagorical_col] = lapply(dfPatients[,catagorical_col] , factor)
str(dfPatients)
str(dfPatients)
# c('serious','insured')
dfPatients[dfPatients$Condition=='serious']
# c('serious','insured')
dfPatients[dfPatients$Condition=='serious',]
# c('serious','insured')
dfPatients[dfPatients$Condition=='serious',]$Insurance=='insured'
# c('serious','insured')
sum(dfPatients[dfPatients$Condition=='serious',]$Insurance=='insured')
mean(dfPatients[dfPatients$Condition=='serious',]$Insurance=='insured')
# c('serious','insured')
sum(dfPatients[dfPatients$Condition=='serious',]$Insurance=='insured')
mean(dfPatients[,dfPatients$Condition=='serious']$Insurance=='insured')
mean(dfPatients[dfPatients$Condition=='serious']$Insurance=='insured')
mean(dfPatients[dfPatients$Condition=='serious',]$Insurance=='insured')
mean(dfPatients[dfPatients$Condition=='serious' & dfPatients$Insurance=='insured',]
mean(dfPatients[dfPatients$Condition=='serious' & dfPatients$Insurance=='insured',]
mean(dfPatients[dfPatients$Condition=='serious' & dfPatients$Insurance=='insured',])
mean(dfPatients[(dfPatients$Condition=='serious' & dfPatients$Insurance=='insured'),])
mean(dfPatients[(dfPatients$Condition=='serious' & dfPatients$Insurance=='insured',)])
mean(dfPatients[(dfPatients$Condition=='serious' & dfPatients$Insurance=='insured',])
mean(dfPatients[(dfPatients$Condition=='serious' & dfPatients$Insurance=='insured'),])
dfPatients$Condition=='serious' & dfPatients$Insurance=='insured'
sum(dfPatients$Condition=='serious' & dfPatients$Insurance=='insured')
mean(dfPatients$Condition=='serious' & dfPatients$Insurance=='insured')
vec1=c(TRUE,FALSE,TRUE,TRUE,FALSE,TRUE)
vec2=c(FALSE,TRUE)
vec2&vec1
mean(dfPatients$Condition=='serious' & dfPatients$Insurance=='insured')
mean(dfPatients$Condition=='serious' & dfPatients$Insurance=='insured')/mean(dfPatients$Insurance=='insured')
mean(dfPatients[dfPatients$Condition=='serious',]$Insurance=='insured')
mean(dfPatients[dfPatients$Insurance=='insured',]$Condition=='serious')
